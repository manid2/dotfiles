" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" --- Basic vim settings
set showcmd          " Show (partial) command in status line.
set showmatch        " Show matching brackets.
set autoindent smartindent  " Smart autoindent on new lines.
set hlsearch         " Highlight searches
"set number " Useful but too distracting, enable as needed.
"set textwidth=80 formatoptions=tcq    " Automatic word wrapping
"set tabstop=8 shiftwidth=8 softtabstop=8 expandtab " handle tabs
" TBD: spellchecking options & settings
"colorscheme darkblue set background=dark " Handle dark backgrounds
" TBD: Toggle whitespaces highlight

" --- vim-plug section, vim plugin manager ---
" https://github.com/junegunn/vim-plug

" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
silent! if plug#begin('~/.vim/plugged')
"call plug#begin('~/.vim/plugged')
" List all plugins here
" Shorthand notation, fetches https://github.com/{user}/{repo}
Plug 'preservim/nerdtree'
Plug 'preservim/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-surround'
Plug 'junegunn/fzf'
Plug 'junegunn/vim-easy-align'
"Plug 'vim-syntastic/syntastic'
Plug 'honza/vim-snippets'
"Plug 'airblade/vim-gitgutter'
Plug 'junegunn/vim-peekaboo'
Plug 'easymotion/vim-easymotion'
Plug 'simeji/winresizer'
Plug 'nathanalderson/yang.vim'

" Uncomment when needed
"Plug 'dhruvasagar/vim-table-mode'
"Plug 'google/vim-searchindex'
"Plug 'jlanzarotta/bufexplorer'
"Plug 'mbbill/undotree'
"Plug 'preservim/vim-pencil'
"Plug 'inkarkat/vim-SpellCheck'
"Plug 'jsfaint/gen_tags.vim'
"Plug 'bling/vim-bufferline'
" List ends here. Plugins become visible to Vim after this call.
call plug#end()
endif
" --- vim-plug section, end ---

" note: Don't use vim-airline or dynamic statuslines to make vim fast for
" very large files ~=50MB
set laststatus=2     " Always show statusline
function! s:statusline_expr()
    " Show vim-obsession status if available
    let session = "%{ObsessionStatus()}"
    let cmode=" [%{mode('0')}] "
    let bfno="[%n] "
    let relflnm="[%f] "
    let trunc="%<"
    let modflg = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
    let ro  = "%{&readonly ? '[RO] ' : ''}"
    let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
    let ftfmt = "[%{&fileformat}] "
    let ften = "[%{&fileencoding ? &fileencoding : &encoding}] "
    let gitst = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
    let sep = ' %= '
    let pos = ' %-12(%l:%c%V%) '
    let higrp='%*'
    let pct = ' %P'
    hi StatusLine ctermbg=Green ctermfg=Black
    hi StatusLineNC ctermbg=LightGray ctermfg=Black
    return session.cmode.bfno.relflnm.trunc.modflg.ro.ft.
            \ftfmt.ften.gitst.sep.pos.higrp.pct
endfunction
let &statusline = s:statusline_expr()

" --- keymaps ---
" keymaps
let mapleader="\<space>"
" Common
"   Save file in normal and also in insert mode
"   note: `inoremap <C-S>     <C-O>:update<cr>` has issue in qterminal
"   (0.16.1) it needs <C-s> + <C-O> to be pressed to trigger update command
"   instead of just <C-s> as documented & expected.
"   Can't figure out this a.t.m. but we need it so added.
inoremap <C-S>         <C-O>:update<cr>
nnoremap <C-S>         :update<cr>

"   Quit
inoremap <C-Q>          <esc>:q<cr>
nnoremap <C-Q>          :q<cr>
nnoremap <Leader>q      :q<cr>
nnoremap <Leader>qa     :qa<cr>
nnoremap <Leader>fq     :q!<cr>
nnoremap <Leader>fqa    :qa!<cr>

" Vim buffers
nnoremap <Leader>bfr    :buffer<space>
nnoremap <Leader>bls    :ls<cr>
nnoremap <Leader>bf     :bfirst<cr>
nnoremap <Leader>bl     :blast<cr>
nnoremap <Leader>bn     :bnext<cr>
nnoremap <Leader>bp     :bprev<cr>
nnoremap <Leader>ba     :ball<cr>
nnoremap <Leader>bad    :badd<cr>
nnoremap <Leader>bd     :bdelete<cr>
nnoremap <Leader>bh     :b#<cr>

" Vim quickfix
nnoremap <Leader>co     :copen<cr>
nnoremap <Leader>cc     :cclose<cr>
nnoremap <Leader>cw     :cwindow<cr>
nnoremap <Leader>cf     :cfile<cr>
nnoremap <Leader>cg     :cgetfile<cr>
nnoremap <Leader>cb     :cbuffer<cr>
nnoremap <Leader>cn     :cnext<cr>
nnoremap <Leader>cp     :cprevious<cr>
nnoremap <Leader>cad    :caddbuffer<cr>
nnoremap <Leader>caf    :cafter<cr>
nnoremap <Leader>cbe    :cbefore<cr>
nnoremap <Leader>cbo    :cbottom<cr>
nnoremap <Leader>cff    :cfirst<cr>
nnoremap <Leader>cfl    :clast<cr>

" Vim location list
nnoremap <Leader>lo     :lopen<cr>
nnoremap <Leader>lc     :lclose<cr>
nnoremap <Leader>lw     :lwindow<cr>
nnoremap <Leader>lf     :lfile<cr>
nnoremap <Leader>lg     :lgetfile<cr>
nnoremap <Leader>lb     :lbuffer<cr>
nnoremap <Leader>ln     :lnext<cr>
nnoremap <Leader>lp     :lprevious<cr>
nnoremap <Leader>lad    :laddbuffer<cr>
nnoremap <Leader>laf    :lafter<cr>
nnoremap <Leader>lbe    :lbefore<cr>
nnoremap <Leader>lbo    :lbottom<cr>
nnoremap <Leader>lff    :lfirst<cr>
nnoremap <Leader>lfl    :llast<cr>

" Vim grep ':vimgrep'
nnoremap <Leader>vg     :vimgrep<space>

" Vim diff 'vimdiff'
nnoremap <Leader>dfu    :diffupdate<cr>
nnoremap <Leader>dfg    :diffget<cr>
nnoremap <Leader>dfp    :diffput<cr>
nnoremap <Leader>dfo    :diffoff<cr>
nnoremap <Leader>dfn    ]c<cr>
nnoremap <Leader>dfp    [c<cr>

" Vim registers to system clipboard
vnoremap <Leader>ctc     :'<,'>w !xclip -selection clipboard -i<Cr><Cr>
nnoremap <Leader>ftc     :w !xclip -selection clipboard -i<Cr><Cr>
"nnoremap <Leader>ytc     :"w !xclip -selection clipboard -i<Cr><Cr>
nnoremap <Leader>pfc     :r !xclip -selection clipboard -o<Cr><Cr>

" Vim tabs
nnoremap <Leader>tbe     :tabedit<cr>
nnoremap <Leader>tbf     :tabfind<cr>
nnoremap <Leader>tbc     :tabclose<cr>
nnoremap <Leader>tbci    :tabclose <cr>
nnoremap <Leader>tbco    :tabonly<cr>
nnoremap <Leader>tbba    :tab ball<cr>
nnoremap <Leader>tbbd    :tab drop <cr>
nnoremap <Leader>tbsp    :tab split<cr>
nnoremap <Leader>tbs     :tabs<cr>
nnoremap <Leader>tbm     :tabm<cr>
nnoremap <Leader>tbm0    :tabm 0<cr>
nnoremap <Leader>tbmi    :tabm <cr>
nnoremap <Leader>tbn     :tabn<cr>
nnoremap <Leader>tbp     :tabp<cr>
nnoremap <Leader>tbgf    :tabfirst<cr>
nnoremap <Leader>tbgl    :tablast<cr>

" Vim windows
" TBD: vim window - resize, split, cycle, change split orientation, rotate

" Vim sessions
let g:sessions_dir = '~/.vim/sessions'
exec 'nnoremap <Leader>ss :Obsession ' . g:sessions_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
exec 'nnoremap <Leader>sr :so ' . g:sessions_dir. '/*.vim<C-D><BS><BS><BS><BS><BS>'
nnoremap <Leader>sp :Obsession<CR>

" Vim macros
" TBD

" Vim functions
" TBD

" Toggle file/project browser
nnoremap <Leader>ntt    :NERDTreeToggle<cr>

" Toggle tags view
nnoremap <Leader>tbt    :TagbarToggle<cr>

" Gnu global gtags
nnoremap <Leader>gt      :Gtags<space>
nnoremap <Leader>gtr     :Gtags -r<space>
nnoremap <Leader>gts     :Gtags -s<space>
nnoremap <Leader>gtg     :Gtags -g<space>
nnoremap <Leader>gtf     :Gtags -f<space>
nnoremap <Leader>gtd     :Gtags -d<space>
nnoremap <Leader>gtp     :Gtags -P<space>
nnoremap <Leader>gtc     :GtagsCursor<cr>
" TBD: gtags input completion is not useful, use alternative vim's <C-N>
" NOTE: use all options of global(1)
" except for -c -n -p -q -u -v and all long name options.
" They are sent to global(1) as is. E.g.,
":Gtags -gi paTtern # matches both ’PATTERN’ and ’pattern’
":Gtags -POi make   # matches Makefile but not makeit.c
"
" For more options please see global
" https://www.gnu.org/software/global/globaldoc_toc.html#global

" note: Don't use 'gtags-cscope.vim' as we want to use gtags only.
" Uncomment if gtags is not available but cscope is, e.g. remote servers
if has("cscope") && filereadable("/usr/bin/cscope")
  set csprg=/usr/bin/cscope
  set csto=0
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
     cs add $PWD/cscope.out
  " else add database pointed to by environment
  elseif $CSCOPE_DB != ""
     cs add $CSCOPE_DB
  endif
  set csverb
  " show cscope results in quickfix & location list windows
  if has("quickfix")
    set cscopequickfix=a-,c-,d-,e-,f-,g-,i-,s-,t-
  endif
  " keymaps
  " cs find commands
  nnoremap <Leader>css       :cs find s <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>csg       :cs find g <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>csc       :cs find c <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>cst       :cs find t <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>cse       :cs find e <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>csf       :cs find f <C-R>=expand("<cfile>")<CR><CR>
  nnoremap <Leader>csi       :cs find i <C-R>=expand("<cfile>")<CR>$<CR>
  nnoremap <Leader>csd       :cs find d <C-R>=expand("<cword>")<CR><CR>
  " scs find commands
  nnoremap <Leader>scss      :scs find s <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>scsg      :scs find g <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>scsc      :scs find c <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>scst      :scs find t <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>scse      :scs find e <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>scsf      :scs find f <C-R>=expand("<cfile>")<CR><CR>
  nnoremap <Leader>scsi      :scs find i <C-R>=expand("<cfile>")<CR>$<CR>
  nnoremap <Leader>scsd      :scs find d <C-R>=expand("<cword>")<CR><CR>
  " vertical scs find commands
  nnoremap <Leader>vcss      :vert scs find s <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>vcsg      :vert scs find g <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>vcsc      :vert scs find c <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>vcst      :vert scs find t <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>vcse      :vert scs find e <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>vcsf      :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
  nnoremap <Leader>vcsi      :vert scs find i <C-R>=expand("<cfile>")<CR>$<CR>
  nnoremap <Leader>vcsd      :vert scs find d <C-R>=expand("<cword>")<CR><CR>
  " lcs find commands
  nnoremap <Leader>lcss      :lcs find s <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>lcsg      :lcs find g <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>lcsc      :lcs find c <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>lcst      :lcs find t <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>lcse      :lcs find e <C-R>=expand("<cword>")<CR><CR>
  nnoremap <Leader>lcsf      :lcs find f <C-R>=expand("<cfile>")<CR><CR>
  nnoremap <Leader>lcsi      :lcs find i <C-R>=expand("<cfile>")<CR>$<CR>
  nnoremap <Leader>lcsd      :lcs find d <C-R>=expand("<cword>")<CR><CR>
endif

" Text editing
"   Line editing
nnoremap <Leader>mld    :m .+1<CR>==
nnoremap <Leader>mlu    :m .-2<CR>==
vnoremap <Leader>mld    :m '>+1<CR>gv=gv
vnoremap <Leader>mlu    :m '<-2<CR>gv=gv
"   Word editing
" TBD: e, E, b, B, viw, vaw -> word navigation & slection
" TBD: transformation, tolower/toupper case, sorting
" TBD: Search and replace

" Custom commands & functions
" TBD
