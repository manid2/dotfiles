" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
	syntax on
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
endif

" --- Basic vim settings -----------------------------------------------
set showcmd          " Show (partial) command in status line.
set showmatch        " Show matching brackets.
set autoindent smartindent  " Smart autoindent on new lines.
set hlsearch         " Highlight searches
set nospell          " Disable built-in spell check use plugin

if &diff
	" NOTE: toggling syntax here is not working as it is being overwritten
	" For xterm256 colors refer:
	" https://www.ditig.com/256-colors-cheat-sheet
	hi DiffAdd    ctermfg=White ctermbg=Black
	hi DiffDelete ctermfg=White ctermbg=DarkRed
	hi DiffChange ctermfg=White ctermbg=DarkGrey
	hi DiffText   ctermfg=White ctermbg=DarkGreen
endif

" --- vim-plug section vim plugin manager ------------------------------
" https://github.com/junegunn/vim-plug

" -- vim plugin options before loading -----------
let g:snipMate = { 'snippet_version' : 1 }
" Disable spell check toggle enable/disable with 'ZT' in normal mode
let g:enable_spelunker_vim = 0

" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
silent! if plug#begin('~/.vim/plugged')
" List all plugins here
" Shorthand notation, fetches https://github.com/{user}/{repo}

" * UI/UX plugins
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'simeji/winresizer'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-unimpaired'
"Plug 'tpope/vim-repeat' " NOTE: enable for most frequently used plugins/cmds
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/vim-peekaboo'
Plug 'preservim/nerdtree'
Plug 'milkypostman/vim-togglelist'
Plug 'pseewald/vim-anyfold'

" * Code editing plugins generic
Plug 'preservim/tagbar'
Plug 'tpope/vim-fugitive'
"Plug 'aperezdc/vim-template' " NOTE: enable when custom templates are created
" -- garbas/vim-snipmate dependencies begin ------
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'honza/vim-snippets'
" -- garbas/vim-snipmate dependencies end --------
Plug 'garbas/vim-snipmate'
Plug 'vim-scripts/a.vim'
"Plug 'vim-scripts/OmniCppComplete' " NOTE: hard to use
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'bergercookie/vim-deb-preview'
Plug 'vim-scripts/gnupg'
Plug 'preservim/nerdcommenter'
Plug 'sukima/xmledit'
" TODO: modify tagsdb generation plugin to use custom command along with
" automatic tags updation
"Plug 'jsfaint/gen_tags.vim'
Plug 'preservim/vim-markdown'

" * Text editing plugins
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
Plug 'google/vim-searchindex'
Plug 'kamykn/spelunker.vim'
"Plug 'dhruvasagar/vim-table-mode'

" * Syntax highlighters
Plug 'ekalinin/Dockerfile.vim'
Plug 'nathanalderson/yang.vim'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()
endif

" --- statusline section -----------------------------------------------
set laststatus=2     " Always show statusline
function! s:statusline_expr()
	" Show vim-obsession status if available
	let session = "%{exists(':Obsession') ? ObsessionStatus() : ''}"
	let cmode=" [%{mode('0')}] "
	let bfno="[%n] "
	let relflnm="[%-0.32f] "
	let trunc="%<"
	let modflg = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
	let ro  = "%{&readonly ? '[RO] ' : ''}"
	let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
	let ftfmt = "[%{&fileformat}] "
	let ften = "[%{&fileencoding ? &fileencoding : &encoding}] "
	let gitst = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
	let sep = ' %= '
	let pos = ' %-16(%l:%c%V [%L]%) '
	let higrp='%*'
	let pct = ' %P'
	hi StatusLine ctermbg=Green ctermfg=Black
	hi StatusLineNC ctermbg=LightGray ctermfg=Black
	return session.cmode.bfno.relflnm.trunc.modflg.ro.ft.
				\ftfmt.ften.gitst.sep.pos.higrp.pct
endfunction
let &statusline = s:statusline_expr()

" --- keymaps section --------------------------------------------------
" map leader key
"let mapleader="\<space>" " default '\'

" Save file in normal and also in insert mode
inoremap <C-S>               <C-O>:update<cr><esc>
nnoremap <C-S>               :update<cr>

" Quit
inoremap <C-Q>               <esc>:q<cr>
nnoremap <C-Q>               :q<cr>
nnoremap <Leader>q           :q<cr>
nnoremap <Leader>qa          :qa<cr>
nnoremap <Leader>fq          :q!<cr>
nnoremap <Leader>fqa         :qa!<cr>

" vim plugins keymaps
nnoremap <Leader>ntt         :NERDTreeToggle<cr>
nnoremap <Leader>tbt         :TagbarToggle<cr>

" Vim grep ':vimgrep'
" TODO: Add grep within current files, buffers, current directory, recursive
nnoremap <Leader>vg          :vimgrep<space>

" --- vim custom functions & keymaps -----------------------------------
" -- vim registers to system clipboard
function! WClipboard(clip_cmd, text)
	:call system(a:clip_cmd, a:text)
endfunction

function! RClipboard(clip_cmd, reg)
	let clipboard_content = system(a:clip_cmd)
	:call setreg(a:reg, clipboard_content)
endfunction

function! YPClipboard(rw)
	let clip_cmd = ''
	let clip_cmd_args = ''
	let def_reg = '"'

	" TODO: handle cases where xclip is not available use alternatives
	" i.e. xsel, tmux, gnu screen
	if executable('xclip')
		let clip_cmd = 'xclip'
		let clip_cmd_args = ' -selection clipboard'
		if a:rw == 'w'
			let clip_cmd_args .= ' -i'
		elseif a:rw == 'r'
			let clip_cmd_args .= ' -o'
		endif
	else
		echom "No suitable clipboard command is found in the system install one of xclip, xsel, tmux."
		return
	endif

	if a:rw == 'w'
		call WClipboard(clip_cmd.clip_cmd_args, getreg(def_reg))
	elseif a:rw == 'r'
		call RClipboard(clip_cmd.clip_cmd_args, def_reg)
	endif
endfunction

nnoremap <Leader>y           :call YPClipboard('w')<cr>
nnoremap <Leader>p           :call YPClipboard('r')<cr>

" -- vim sessions
let s:sessions_dir = '~/.vim/sessions'
exe 'nnoremap <Leader>ss :Obsession ' . s:sessions_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
exe 'nnoremap <Leader>sr :so ' . s:sessions_dir. '/*.vim<C-D><BS><BS><BS><BS><BS>'
nnoremap <Leader>sp          :Obsession<CR>

" -- vim cscope settings
" Refer:
" * http://cscope.sourceforge.net/cscope_maps.vim
" * vim `:h cs-find`
if has("cscope")
	" use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
	set cscopetag
	" check symbol in ctags first and then cscope
	set csto=0
	" add any cscope db present in current directory else add from
	" CSCOPE_DB environment variable.
	if filereadable("cscope.out")
		cs add cscope.out
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	" show msg when any other cscope db added
	set cscopeverbose

	" cscope find command

	" set csope quickfix options to show cscope results in quickfix &
	" location list windows
	let s:csfindopts = ['s', 'g', 'd', 'c', 't', 'e', 'f', 'i']
	if has("quickfix")
		if (v:version > 800)
			let s:csfindopts += ['a']
		endif
		exe 'set cscopequickfix=' . join(s:csfindopts, '-,') . '-'
	endif

	" cscope keymaps
	for s:csfcmd in ['cs', 'scs', 'vert scs', 'lcs']
		let s:csfcmdkey='\'
		if s:csfcmd == 'scs'
			let s:csfcmdkey = ']'
		elseif s:csfcmd == 'vert scs'
			let s:csfcmdkey = "'"
		elseif s:csfcmd == 'lcs'
			let s:csfcmdkey = 'l'
		endif

		for s:csfopt in s:csfindopts
			let s:csfkeymap='nnoremap <Leader>'
			let s:csfkeymap .= s:csfcmdkey.s:csfopt.' :'.s:csfcmd.' find '.s:csfopt
			if s:csfopt == 'f'
				let s:csfkeymap .= ' <C-R>=expand("<cfile>")<CR><CR>'
			elseif s:csfopt == 'i'
				let s:csfkeymap .= ' <C-R>=expand("<cfile>")<CR>$<CR>'
			else
				let s:csfkeymap .= ' <C-R>=expand("<cword>")<CR><CR>'
			endif

			exe s:csfkeymap
		endfor
	endfor
endif

" vim:tw=78:ts=8:noet:ft=vim:norl:
