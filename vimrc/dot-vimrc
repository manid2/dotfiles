" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
	syntax on
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
endif

" --- Basic vim settings -----------------------------------------------
set showcmd          " Show (partial) command in status line.
set showmatch        " Show matching brackets.
set autoindent smartindent  " Smart autoindent on new lines.
set hlsearch         " Highlight searches

" --- vim-plug section vim plugin manager ------------------------------
" https://github.com/junegunn/vim-plug

" -- vim plugin options before loading -----------

" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
silent! if plug#begin('~/.vim/plugged')
" List all plugins here
" Shorthand notation, fetches https://github.com/{user}/{repo}

" * UI/UX plugins
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'simeji/winresizer'
Plug 'tpope/vim-obsession'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/vim-peekaboo'
Plug 'preservim/nerdtree'

" * Code editing plugins generic
Plug 'preservim/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'aperezdc/vim-template'
Plug 'vim-scripts/a.vim'
Plug 'vim-scripts/OmniCppComplete'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'vim-scripts/deb.vim'
Plug 'vim-scripts/gnupg'
Plug 'preservim/nerdcommenter'
Plug 'sukima/xmledit'
" TODO: modify tagsdb generation plugin to use custom command along with
" automatic tags updation
"Plug 'jsfaint/gen_tags.vim'

" * Text editing plugins
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
Plug 'google/vim-searchindex'
"Plug 'inkarkat/vim-SpellCheck'
"Plug 'dhruvasagar/vim-table-mode'

" * Syntax highlighters
Plug 'ekalinin/Dockerfile.vim'
Plug 'nathanalderson/yang.vim'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()
endif

" --- statusline section -----------------------------------------------
set laststatus=2     " Always show statusline
function! s:statusline_expr()
	" Show vim-obsession status if available
	let session = "%{exists(':Obsession') ? ObsessionStatus() : ''}"
	let cmode=" [%{mode('0')}] "
	let bfno="[%n] "
	let relflnm="[%f] "
	let trunc="%<"
	let modflg = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
	let ro  = "%{&readonly ? '[RO] ' : ''}"
	let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
	let ftfmt = "[%{&fileformat}] "
	let ften = "[%{&fileencoding ? &fileencoding : &encoding}] "
	let gitst = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
	let sep = ' %= '
	let pos = ' %-16(%l:%c%V [%L]%) '
	let higrp='%*'
	let pct = ' %P'
	hi StatusLine ctermbg=Green ctermfg=Black
	hi StatusLineNC ctermbg=LightGray ctermfg=Black
	return session.cmode.bfno.relflnm.trunc.modflg.ro.ft.
				\ftfmt.ften.gitst.sep.pos.higrp.pct
endfunction
let &statusline = s:statusline_expr()

" --- keymaps section --------------------------------------------------
" map leader key
"let mapleader="\<space>" " default '\'

" Save file in normal and also in insert mode
inoremap <C-S>         <C-O>:update<cr>
nnoremap <C-S>         :update<cr>

" Quit
inoremap <C-Q>          <esc>:q<cr>
nnoremap <C-Q>          :q<cr>
nnoremap <Leader>q      :q<cr>
nnoremap <Leader>qa     :qa<cr>
nnoremap <Leader>fq     :q!<cr>
nnoremap <Leader>fqa    :qa!<cr>

" Vim buffers
nnoremap <Leader>bfr    :buffer<space>
nnoremap <Leader>bls    :ls<cr>
nnoremap <Leader>bf     :bfirst<cr>
nnoremap <Leader>bl     :blast<cr>
nnoremap <Leader>bn     :bnext<cr>
nnoremap <Leader>bp     :bprev<cr>
nnoremap <Leader>ba     :ball<cr>
nnoremap <Leader>bad    :badd<cr>
nnoremap <Leader>bd     :bdelete<cr>
nnoremap <Leader>bh     :b#<cr>

" Vim quickfix
nnoremap <Leader>xo     :copen<cr>
nnoremap <Leader>xc     :cclose<cr>
nnoremap <Leader>xn     :cnext<cr>
nnoremap <Leader>xp     :cprevious<cr>
nnoremap <Leader>xf     :cfirst<cr>
nnoremap <Leader>xl     :clast<cr>

" Vim location list
nnoremap <Leader>lo     :lopen<cr>
nnoremap <Leader>lc     :lclose<cr>
nnoremap <Leader>ln     :lnext<cr>
nnoremap <Leader>lp     :lprevious<cr>
nnoremap <Leader>lf     :lfirst<cr>
nnoremap <Leader>ll     :llast<cr>

" Vim grep ':vimgrep'
" TODO: Add grep within current files, buffers, current directory, recursive
nnoremap <Leader>vg     :vimgrep<space>

" Vim registers to system clipboard

" Vim sessions
let g:sessions_dir = '~/.vim/sessions'
exec 'nnoremap <Leader>ss :Obsession ' . g:sessions_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
exec 'nnoremap <Leader>sr :so ' . g:sessions_dir. '/*.vim<C-D><BS><BS><BS><BS><BS>'
nnoremap <Leader>sp :Obsession<CR>

" TODO: add vim macros & their keymaps

nnoremap <Leader>ntt    :NERDTreeToggle<cr>
nnoremap <Leader>tbt    :TagbarToggle<cr>

" If cscope available
if has("cscope") && filereadable("/usr/bin/cscope")
	set csprg=/usr/bin/cscope
	set csto=0
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add $PWD/cscope.out
		" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set csverb
	" show cscope results in quickfix & location list windows
	if has("quickfix")
		if (v:version < 800)
			set cscopequickfix=c-,d-,e-,f-,g-,i-,s-,t-
		else
			set cscopequickfix=a-,c-,d-,e-,f-,g-,i-,s-,t-
		endif
	endif
	" keymaps
	" cs find commands
	nnoremap <Leader>css       :cs find s <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>csg       :cs find g <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>csc       :cs find c <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>cst       :cs find t <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>cse       :cs find e <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>csf       :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nnoremap <Leader>csi       :cs find i <C-R>=expand("<cfile>")<CR>$<CR>
	nnoremap <Leader>csd       :cs find d <C-R>=expand("<cword>")<CR><CR>
	" scs find commands
	nnoremap <Leader>scss      :scs find s <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>scsg      :scs find g <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>scsc      :scs find c <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>scst      :scs find t <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>scse      :scs find e <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>scsf      :scs find f <C-R>=expand("<cfile>")<CR><CR>
	nnoremap <Leader>scsi      :scs find i <C-R>=expand("<cfile>")<CR>$<CR>
	nnoremap <Leader>scsd      :scs find d <C-R>=expand("<cword>")<CR><CR>
	" vertical scs find commands
	nnoremap <Leader>vcss      :vert scs find s <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>vcsg      :vert scs find g <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>vcsc      :vert scs find c <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>vcst      :vert scs find t <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>vcse      :vert scs find e <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>vcsf      :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
	nnoremap <Leader>vcsi      :vert scs find i <C-R>=expand("<cfile>")<CR>$<CR>
	nnoremap <Leader>vcsd      :vert scs find d <C-R>=expand("<cword>")<CR><CR>
	" lcs find commands
	nnoremap <Leader>lcss      :lcs find s <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>lcsg      :lcs find g <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>lcsc      :lcs find c <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>lcst      :lcs find t <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>lcse      :lcs find e <C-R>=expand("<cword>")<CR><CR>
	nnoremap <Leader>lcsf      :lcs find f <C-R>=expand("<cfile>")<CR><CR>
	nnoremap <Leader>lcsi      :lcs find i <C-R>=expand("<cfile>")<CR>$<CR>
	nnoremap <Leader>lcsd      :lcs find d <C-R>=expand("<cword>")<CR><CR>
endif

" Text editing
"   Line editing
nnoremap <Leader>mld    :m .+1<CR>==
nnoremap <Leader>mlu    :m .-2<CR>==
vnoremap <Leader>mld    :m '>+1<CR>gv=gv
vnoremap <Leader>mlu    :m '<-2<CR>gv=gv
