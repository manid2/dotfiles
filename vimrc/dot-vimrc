" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
	syntax on
endif

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
endif

" --- Basic vim settings -----------------------------------------------
set showcmd          " Show (partial) command in status line.
set showmatch        " Show matching brackets.
set autoindent smartindent  " Smart autoindent on new lines.
set hlsearch         " Highlight searches
set nospell          " Disable built-in spell check use plugin

" view man pages inside vim
runtime ftplugin/man.vim
set keywordprg=:Man

" Readable colors in diff mode with syntax on
if &diff
	" For xterm256 colors refer:
	" https://www.ditig.com/256-colors-cheat-sheet
	hi DiffAdd    ctermfg=White ctermbg=Black
	hi DiffDelete ctermfg=White ctermbg=DarkRed
	hi DiffChange ctermfg=White ctermbg=DarkGrey
	hi DiffText   ctermfg=White ctermbg=DarkGreen
endif

" Readable colors in visual mode in all terminals
hi Visual ctermbg=darkgrey ctermfg=white

" From vim-sensible plugin
" Set characters to see invisible characters
if &listchars ==# 'eol:$'
	set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

" --- vim-plug section vim plugin manager ------------------------------
" https://github.com/junegunn/vim-plug

" -- vim plugin options before loading -----------
let g:snipMate = { 'snippet_version' : 1 }
" Disable spell check toggle enable/disable with 'ZT' in normal mode
let g:enable_spelunker_vim = 0

" Use '-' as easymotion prefix
map -                        <Plug>(easymotion-prefix)

" Disable vim-markdown folding configuration, enable with custom function
" TODO: Add custom function to enable/disable vim-markdown folding
let g:vim_markdown_folding_disabled = 1

" TODO: Use generic heading using function and filetype
" Markdown headings
nnoremap <leader>1           m`yypVr=``
nnoremap <leader>2           m`yypVr-``
nnoremap <leader>3           m`^i### <esc>``4l
nnoremap <leader>4           m`^i#### <esc>``5l
nnoremap <leader>5           m`^i##### <esc>``6l

" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
silent! if plug#begin('~/.vim/plugged')
" List all plugins here
" Shorthand notation, fetches https://github.com/{user}/{repo}

" * UI/UX plugins
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'simeji/winresizer'
Plug 'tpope/vim-unimpaired'
"Plug 'tpope/vim-repeat' " NOTE: enable for most frequently used plugins/cmds
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/vim-peekaboo'
Plug 'preservim/nerdtree'
Plug 'milkypostman/vim-togglelist'
Plug 'pseewald/vim-anyfold'
Plug 'manid2/vim-ypclipboard', {'branch': 'dev'}
Plug 'manid2/vim-grep-replace', {'branch': 'dev'}

" * Code editing plugins generic
Plug 'preservim/tagbar'
Plug 'tpope/vim-fugitive'
"Plug 'aperezdc/vim-template' " NOTE: enable when custom templates are created
" -- garbas/vim-snipmate dependencies begin ------
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'honza/vim-snippets'
" -- garbas/vim-snipmate dependencies end --------
Plug 'garbas/vim-snipmate'
Plug 'vim-scripts/a.vim'
"Plug 'vim-scripts/OmniCppComplete' " NOTE: hard to use
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'bergercookie/vim-deb-preview'
Plug 'vim-scripts/gnupg'
Plug 'preservim/nerdcommenter'
Plug 'sukima/xmledit'
" TODO: modify tagsdb generation plugin to use custom command along with
" automatic tags updation
"Plug 'jsfaint/gen_tags.vim'
Plug 'preservim/vim-markdown'
Plug 'manid2/vim-cscope-settings'
Plug 'chrisbra/matchit'

" * Text editing plugins
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
Plug 'google/vim-searchindex'
Plug 'kamykn/spelunker.vim'
"Plug 'dhruvasagar/vim-table-mode'

" * Syntax highlighters
Plug 'ekalinin/Dockerfile.vim'
Plug 'nathanalderson/yang.vim'
Plug 'Glench/Vim-Jinja2-Syntax'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()
endif

" --- statusline section -----------------------------------------------
set laststatus=2     " Always show statusline
function! s:statusline_expr()
	let sp      = ' '
	let cmode   = "%{mode('0')}"
	let ro      = "%{&readonly ? 'R' : ''}"
	let mo      = "%{!&modifiable ? 'M' : ''}"
	let modflg  = "%{&modified ? '+' : '-'}"
	let ft      = printf("%%{%s}%%{%s}",
				\"strpart(&filetype, 0, 7)",
				\"len(&filetype) > 7 ? '>' : ''")
	let relflnm = "[%0.16f]"
	let gitst   = printf("%%0.14{%s%s%s}",
				\"exists('g:loaded_fugitive') ?",
				\"fugitive#statusline() :",
				\"''")
	let currtag = "%0.24{exists(':TagbarCurrentTag') ? ".
				\"tagbar#currenttag('%s','') : ''}"
	let sep     = '%='
	let pos     = '%0.16(%l:%c%V %L%)'
	let pct     = '%p%%'

	hi StatusLine ctermbg=Green ctermfg=Black
	hi StatusLineNC ctermbg=LightGray ctermfg=Black

	return cmode.ro.mo.modflg.
				\sp.ft.
				\sp.relflnm.
				\sp.gitst.
				\sp.currtag.
				\sep.
				\pos.
				\sp.pct
endfunction
let &statusline = s:statusline_expr()

" --- keymaps section --------------------------------------------------
" map leader key
"let mapleader="\<space>" " default '\'

" Common variables
let s:cword = '<C-R>=expand("<cword>")<cr>'
let s:cfp = '<C-R>=expand("%")<cr>'
let s:cfn = '<C-R>=expand("%:t")<cr>'

" Save file in normal and also in insert mode
inoremap <C-S>               <ESC>:update<cr>
nnoremap <C-S>               :update<cr>
" Alternative to <C-S> when terminal stops updating
inoremap <C-A>s              <ESC>:update<cr>
nnoremap <C-A>s              :update<cr>

" Quit
inoremap <C-Q>               <ESC>:q<cr>
nnoremap <C-Q>               :q<cr>
nnoremap <C-Q>f              :q!<cr>
nnoremap <C-Q>fa             :qall!<cr>
nnoremap <C-Q>o              :only<cr>

" Movement
" window movements
nnoremap <C-J>               <C-w>w
nnoremap <C-K>               <C-w>W

" Highlight current word without jumping
exe 'nnoremap <Leader>h :let @/=''\<'.s:cword.'\>''<cr>:set hlsearch<cr>'

" vim to new shell, after done exit or use ctrl+d to bring back vim
nnoremap <Leader>sh          :shell<cr>
" <C-Z> to get same shell as vim was started
" execute 'fg' command to bring vim back

" vim plugins keymaps
nnoremap <Leader>nt          :NERDTreeToggle<cr>
nnoremap <Leader>tb          :TagbarToggle<cr>
nnoremap <Leader>tc          :TagbarCurrentTag<cr>
nnoremap <Leader>ty          :call WClipboard(tagbar#currenttag('%s',''))<cr>

" vim-fugitive keymaps
nnoremap <Leader>gb          :Git blame<cr>
nnoremap <Leader>gl          :Git log<cr>
nnoremap <Leader>gd          :Git diff<cr>
"   open git summary same as 'git status'
nnoremap <Leader>gs          :Git<cr>

" fzf.vim keymaos
" refer: https://github.com/junegunn/fzf.vim#readme
nnoremap fzf                 :Files<cr>
nnoremap fgf                 :GFiles<cr>
nnoremap fbf                 :Buffers<cr>
nnoremap frg                 :Rg<cr>
nnoremap flf                 :Lines<cr>
nnoremap fbl                 :BLines<cr>
nnoremap fft                 :Tags<cr>
nnoremap ffb                 :BTags<cr>
nnoremap ffm                 :Marks<cr>
nnoremap ffw                 :Windows<cr>
nnoremap fsf                 :History/<cr>
nnoremap fgc                 :Commits<cr>
nnoremap fbc                 :BCommits<cr>
nnoremap fcf                 :Commands<cr>
nnoremap fmf                 :Maps<cr>

command! -bang -nargs=* GGrep
			\ call fzf#vim#grep(
			\ 'git grep --line-number -- '.shellescape(<q-args>),
			\ 0,
			\ fzf#vim#with_preview({
			\   'dir': systemlist(
			\     'git rev-parse --show-toplevel')[0]}), <bang>0)

exe 'nnoremap fgg :GGrep '.s:cword.'<cr>'

" --- vim custom functions & keymaps -----------------------------------
" -- trim trailing whitespaces
function! TrimTrailingWhitespace() range
	let l:cmd = "keepjumps keeppatterns "
	let l:pat = "s/\\s\\+$//e"
	if exists('a:firstline')
		exe l:cmd.a:firstline.",".a:lastline.l:pat
	else
		exe l:cmd.l:pat
	endif
	call winrestview(b:winview)
endfunction

command! -range=% TrimTrailingWhitespace
			\ let b:winview = winsaveview() |
			\ <line1>,<line2>call TrimTrailingWhitespace()

" -- trim leading whitespaces
function! TrimLeadingWhitespace() range
	let l:cmd = "keepjumps keeppatterns "
	let l:pat = "s/^\\s\\+//e"
	if exists('a:firstline')
		exe l:cmd.a:firstline.",".a:lastline.l:pat
	else
		exe l:cmd.l:pat
	endif
	call winrestview(b:winview)
endfunction

command! -range=% TrimLeadingWhitespace
			\ let b:winview = winsaveview() |
			\ <line1>,<line2>call TrimLeadingWhitespace()

nnoremap <Leader>tt          :TrimTrailingWhitespace<cr>
nnoremap <Leader>tl          :TrimLeadingWhitespace<cr>

" -- vim indent and format file
nnoremap <C-A>i              gg=G``
nnoremap <C-A>q              gggqG``

" -- Toggle syntax highilight
function! ToggleSyntax()
	if exists("g:syntax_on")
		syntax off
	else
		syntax enable
	endif
endfunction

command! -nargs=0 ToggleSyntax
			\ call ToggleSyntax()

nnoremap <Leader>syn         :ToggleSyntax<cr>

" copy file path/name into clipboard
exe 'nnoremap <silent> <Leader>fp :WClipboard '.s:cfp.'<cr>'
exe 'nnoremap <silent> <Leader>fn :WClipboard '.s:cfn.'<cr>'
