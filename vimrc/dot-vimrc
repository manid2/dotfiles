" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" --- Vim options ------------------------------------------------------------
set nocompatible     " Use Vim defaults instead of 100% vi compatibility.
set showcmd          " Show (partial) command in status line.
set showmatch        " Show matching brackets.
set autoindent       " Autoindent new lines based on previous line.
set smartindent      " Like autoindent but recognizes C syntax and indents.
set hlsearch         " Highlight searches.
set nospell          " Disable built-in spell check use plugin.
set wildmenu         " Display completion matches in a status line.
set scrolloff=5      " Show 5 lines of context around the cursor.
set history=100      " Command line history.
set nomodeline       " Disable modelines for security reasons.
set backspace=indent,eol,start  " More powerful backspacing.

" View man pages inside vim
runtime ftplugin/man.vim
set keywordprg=:Man

" Set default dictionary
set dictionary+=/usr/share/dict/words
set dictionary+=~/.local/share/dict/words
set complete+=k      " Allow word completions from dictionary.

" Set characters to see invisible characters
if &listchars ==# 'eol:$'
	set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

syntax enable

" Load indentation rules and plugins according to the detected filetype.
filetype plugin indent on

" Use 1 shiftwidth for line continuation in vim scripts
let g:vim_indent_cont=shiftwidth()

" --- Highlight colors -------------------------------------------------------
" Override colors for some highlight groups
"
" NOTE: These colors are correct for default.vim colorscheme.
" TODO: Use custom function to set highlight colors.
"
" For xterm256 colors refer:
" https://vimhelp.org/syntax.txt.html#cterm-colors

hi clear CursorLine

hi Normal       ctermfg=Grey
hi Visual       ctermfg=White       ctermbg=Cyan
hi Search       ctermfg=LightYellow ctermbg=Black
hi DiffAdd      ctermfg=White       ctermbg=Black
hi DiffDelete   ctermfg=White       ctermbg=DarkRed
hi DiffChange   ctermfg=White       ctermbg=DarkGrey
hi DiffText     ctermfg=White       ctermbg=DarkGreen
hi CursorColumn ctermfg=White       ctermbg=Blue
hi CursorLine   ctermfg=White       ctermbg=Blue
hi StatusLine   ctermbg=Green       ctermfg=Black
hi StatusLineNC ctermbg=LightGray   ctermfg=Black
hi MatchParen   ctermfg=Cyan        ctermbg=Black

hi CursorLineNr cterm=bold ctermfg=DarkGreen ctermbg=DarkGrey
hi ColorColumn  cterm=bold ctermfg=White     ctermbg=Magenta

" --- Custom functions and commands ------------------------------------------
"  TODO: Trim trailing whitespaces and format text:
"  o) on edited lines only.
"  o) on list of lines only.
"  o) on `git diff -U0` lines.
"  o) with option to highlight and confirmation.
"  o) automatically before buffer write.
function! TrimTrailingWhitespace() range
	let l:cmd="keepjumps keeppatterns "
	let l:pat="s/\\s\\+$//e"
	if exists('a:firstline')
		exe l:cmd.a:firstline.",".a:lastline.l:pat
	else
		exe l:cmd.l:pat
	endif
	call winrestview(b:winview)
endfunction

function! TrimLeadingWhitespace() range
	let l:cmd="keepjumps keeppatterns "
	let l:pat="s/^\\s\\+//e"
	if exists('a:firstline')
		exe l:cmd.a:firstline.",".a:lastline.l:pat
	else
		exe l:cmd.l:pat
	endif
	call winrestview(b:winview)
endfunction

function! ToggleSyntax()
	if exists("g:syntax_on")
		syntax off
	else
		syntax enable
	endif
endfunction

function! ToggleMarkdownFolding()
	if g:vim_markdown_folding_disabled
		let g:vim_markdown_folding_disabled=0
		setlocal foldlevel=0
	else
		let g:vim_markdown_folding_disabled=1
		setlocal foldlevel=99
	endif
endfunction

function! ToggleHighlightLongLines()
	if exists('w:long_line_match')
		silent! call matchdelete(w:long_line_match)
		unlet w:long_line_match
	elseif &textwidth > 0
		let w:long_line_match =
			\ matchadd('ColorColumn', '\%>'.&textwidth.'v.\+', -1)
	else
		let w:long_line_match =
			\ matchadd('ColorColumn', '\%>79v.\+', -1)
	endif
endfunction

" Commands to use custom functions
command! -range=% TrimTrailingWhitespace
	\ let b:winview=winsaveview() |
	\ <line1>,<line2>call TrimTrailingWhitespace()

command! -range=% TrimLeadingWhitespace
	\ let b:winview=winsaveview() |
	\ <line1>,<line2>call TrimLeadingWhitespace()

command! -nargs=0 ToggleSyntax call ToggleSyntax()
command! -nargs=0 ToggleMarkdownFolding call ToggleMarkdownFolding()
command! -nargs=0 ToggleHighlightLongLines call ToggleHighlightLongLines()

" --- Auto commands ----------------------------------------------------------
" Auto commands common to all files
augroup common
	autocmd!
	" jump to the last position when reopening a file
	autocmd BufReadPost *
		\   if line("'\"") >= 1 && line("'\"") <= line("$")
		\     && &ft !~# 'commit'
		\ |     exe "normal! g`\""
		\ | endif

	" Default options for any file type
	autocmd FileType *
		\   let g:statusline_wordcount_disabled=1
		\ | let g:vim_markdown_folding_disabled=1
		\ | setlocal foldlevel=99
		\ | nnoremap <Leader>f <Nop>

	autocmd FileType markdown,text,vim,c,cpp,h,hh,hpp,make
		\ setlocal textwidth=78

	" TODO: use vim plugin similar to ftplugin/man.vim to use
	" dictionary for K command in vim for markdown and text files.
	"
	" Use custom script till vim dict plugin is ready. 'dictls' is a
	" custom script to show dict output with colors in pager.
	" dictls = dict "$@" | colorit | less -r
	autocmd FileType markdown,text setlocal keywordprg=dictls
augroup end

augroup markdown
	autocmd!
	autocmd FileType markdown
		\   let g:statusline_wordcount_disabled=0
		\ | setlocal foldlevel=99
		\ | nnoremap <Leader>f :ToggleMarkdownFolding<cr>
augroup end

" --- vim-plug section vim plugin manager ------------------------------------
" https://github.com/junegunn/vim-plug

" -- vim plugin options before loading -----------
" Use latest snipMate parser for new features.
let g:snipMate={ 'snippet_version' : 1 }

" Disable spell check on start as it slows down vim.
let g:enable_spelunker_vim=0

" Use '-' as easymotion prefix
map -                        <Plug>(easymotion-prefix)

" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
silent! if plug#begin('~/.vim/plugged')
" List all plugins here
" Shorthand notation, fetches https://github.com/{user}/{repo}

" * UI/UX plugins
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'simeji/winresizer'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/vim-peekaboo'
Plug 'preservim/nerdtree'
Plug 'milkypostman/vim-togglelist'
Plug 'pseewald/vim-anyfold'
Plug 'manid2/vim-ypclipboard', {'branch': 'dev'}
Plug 'manid2/vim-grep-replace', {'branch': 'dev'}

" * Code editing plugins generic
Plug 'preservim/tagbar'
Plug 'tpope/vim-fugitive'
"Plug 'aperezdc/vim-template' " NOTE: enable when custom templates are created
" -- garbas/vim-snipmate dependencies begin ------
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'honza/vim-snippets'
" -- garbas/vim-snipmate dependencies end --------
Plug 'garbas/vim-snipmate'
Plug 'vim-scripts/a.vim'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'bergercookie/vim-deb-preview'
Plug 'vim-scripts/gnupg'
Plug 'preservim/nerdcommenter'
Plug 'sukima/xmledit'
" TODO: modify tagsdb generation plugin to use custom command along with
" automatic tags updation
"Plug 'jsfaint/gen_tags.vim'
Plug 'preservim/vim-markdown'
Plug 'manid2/vim-cscope-settings'
Plug 'chrisbra/matchit'

" * Text editing plugins
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
Plug 'google/vim-searchindex'
Plug 'kamykn/spelunker.vim'

" * Syntax highlighters
Plug 'ekalinin/Dockerfile.vim'
Plug 'nathanalderson/yang.vim'
Plug 'Glench/Vim-Jinja2-Syntax'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()
endif

" --- statusline section -----------------------------------------------------
" TODO: move statusline section into a plugin
"   refer: https://stackoverflow.com/a/17184285

" Define global variables

" NOTE: Execute system commands at the start to avoid errors in vim and slows
" down vim as it evaluates status line expression continuously.
let g:vim_git_branch=trim(system("git branch --show-current 2>/dev/null"))

" Disable word count on status line on start as it slows down vim.
let g:statusline_wordcount_disabled=1

" statusline helper functions
function! SiSlSecModeFlags()
	let l:ro=&readonly ? 'R' : ''
	let l:mf=&modified ? '+' : ''
	let l:bfn=len(getbufinfo({'buflisted':1}))
	let l:bfn=l:bfn > 1 ? '/'.string(l:bfn) : ''
	return "%0.10(".mode('0').l:ro.l:mf." %n".l:bfn."%)"
endfunction

function! SiSlSecFileType()
	" TODO: truncate right when exceeding max chars.
	return "%0.10(".&filetype."%)"
endfunction

function! SiSlSecGitStr()
	return "%0.24(".g:vim_git_branch."%)"
endfunction

function! SiSlSecCurrentTag()
	let l:ct=''
	if exists(':TagbarCurrentTag')
		let l:ct="%0.24(".tagbar#currenttag('%s', '')."%)"
	endif
	return l:ct
endfunction

function! SiSlSecWordCount()
	let l:wc=''
	if g:statusline_wordcount_disabled
		return l:wc
	endif
	if has_key(wordcount(),'visual_words')
		let l:wc=wordcount().visual_words."/".wordcount().words
	else
		let l:wc=wordcount().cursor_words."/".wordcount().words
	endif
	return "%0.9(".l:wc."%)"
endfunction

function! SiSlSecRelFileInfo()
	return "%0.50(%f:%l:%c%V|%L|%p%%%)"
endfunction

function! s:statusline_expr()
	let l:sp=' '
	return    '%{%SiSlSecModeFlags()%}'.l:sp.
		\ '%{%SiSlSecFileType()%}'.l:sp.
		\ '%{%SiSlSecGitStr()%}'.l:sp.
		\ '%{%SiSlSecCurrentTag()%}'.
		\ "%=".
		\ '%{%SiSlSecWordCount()%}'.l:sp.
		\ '%{%SiSlSecRelFileInfo()%}'
endfunction

set laststatus=2     " Always show statusline
let &statusline=s:statusline_expr()

" Custom status line functions.
function! ToggleStatuslineWordcount()
	if g:statusline_wordcount_disabled
		let g:statusline_wordcount_disabled=0
	else
		let g:statusline_wordcount_disabled=1
	endif
endfunction

" TODO: Add toggle function for status line sections to view them as needed.

" Custom status line commands.
command! -nargs=0 ToggleStatuslineWordcount call ToggleStatuslineWordcount()

" Custom status line keymaps.
nnoremap <silent> <Leader>wc :ToggleStatuslineWordcount<cr>

" --- keymaps section --------------------------------------------------------
" Common variables
let s:cword='<C-R>=expand("<cword>")<cr>'
let s:cfp='<C-R>=expand("%")<cr>'
let s:cfn='<C-R>=expand("%:t")<cr>'

" Save file in normal and also in insert mode
inoremap <C-S>               <ESC>:update<cr>
nnoremap <C-S>               :update<cr>
" Alternative to <C-S> when terminal stops updating
inoremap <C-A>s              <ESC>:update<cr>
nnoremap <C-A>s              :update<cr>

" Quit
inoremap <C-Q>               <ESC>:q<cr>
nnoremap <C-Q>               :q<cr>
nnoremap <C-Q>f              :q!<cr>
nnoremap <C-Q>fa             :qall!<cr>
nnoremap <C-Q>o              :only<cr>

" Movement
" window movements
nnoremap <C-J>               <C-w>w
nnoremap <C-K>               <C-w>W

" Indent and format file
nnoremap <C-A>i              gg=G``
nnoremap <C-A>q              gggqG``

" Highlight current word without jumping
exe 'nnoremap <Leader>h :let @/=''\<'.s:cword.'\>''<cr>:set hlsearch<cr>'

" Vim to new shell, after done exit or use ctrl+d to bring back vim
nnoremap <Leader>sh          :shell<cr>
" <C-Z> to get same shell as vim was started
" execute 'fg' command to bring vim back

" Custom functions keymaps
nnoremap <Leader>tt          :TrimTrailingWhitespace<cr>
nnoremap <Leader>tl          :TrimLeadingWhitespace<cr>
nnoremap <Leader>syn         :ToggleSyntax<cr>
nnoremap <Leader>hll         :ToggleHighlightLongLines<cr>

" TODO: Use generic heading using function and filetype
" Markdown headings
nnoremap <Leader>1           m`yypVr=``
nnoremap <Leader>2           m`yypVr-``
nnoremap <Leader>3           m`^i### <esc>``4l
nnoremap <Leader>4           m`^i#### <esc>``5l
nnoremap <Leader>5           m`^i##### <esc>``6l

" vim plugins keymaps
nnoremap <Leader>nt          :NERDTreeToggle<cr>
nnoremap <Leader>tb          :TagbarToggle<cr>
nnoremap <Leader>tc          :TagbarCurrentTag<cr>
nnoremap <Leader>ty          :call WClipboard(tagbar#currenttag('%s',''))<cr>

" vim-fugitive keymaps
nnoremap <Leader>gb          :Git blame<cr>
nnoremap <Leader>gl          :Git log<cr>
nnoremap <Leader>gd          :Git diff<cr>
nnoremap <Leader>gs          :Git<cr>

" fzf.vim keymaos
nnoremap fzf                 :Files<cr>
nnoremap fgf                 :GFiles<cr>
nnoremap fbf                 :Buffers<cr>
nnoremap frg                 :Rg<cr>
nnoremap flf                 :Lines<cr>
nnoremap fbl                 :BLines<cr>
nnoremap fft                 :Tags<cr>
nnoremap ffb                 :BTags<cr>
nnoremap ffm                 :Marks<cr>
nnoremap ffw                 :Windows<cr>
nnoremap fsf                 :History/<cr>
nnoremap fgc                 :Commits<cr>
nnoremap fbc                 :BCommits<cr>
nnoremap fcf                 :Commands<cr>
nnoremap fmf                 :Maps<cr>

command! -bang -nargs=* GGrep
	\ call fzf#vim#grep(
	\   'git grep --line-number -- '.shellescape(<q-args>),
	\   0,
	\   fzf#vim#with_preview({
	\     'dir': systemlist('git rev-parse --show-toplevel')[0]}),
	\   <bang>0)

" Grep word under cursor with git grep useful when no tags.
exe 'nnoremap fgg :GGrep '.s:cword.'<cr>'

" Copy file path/name into clipboard
exe 'nnoremap <silent> <Leader>fp :WClipboard '.s:cfp.'<cr>'
exe 'nnoremap <silent> <Leader>fn :WClipboard '.s:cfn.'<cr>'
